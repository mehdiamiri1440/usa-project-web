profile/add-comment=>
App\Http\Controllers\Accounting\comment_controller@post_comment

    arguments: text, rating_score, user_id

    this will crate a comment for given user id and by already logged in user with the text and score provided

profile/get-user-comments=>
App\Http\Controllers\Accounting\comment_controller@get_user_comments

    arguments: user_id,

    it gets a user id and return all informations about that specific user comments

profile/do-like=>
App\Http\Controllers\Accounting\comment_controller@do_like_actions

    arguments: comment_id, action

    it gets an specific comment id and like or dislike as an actoin and store it in database

profile/is-user-authorized-to-post-comment=>
App\Http\Controllers\Accounting\comment_controller@is_user_authorized_to_post_comment_on_the_user

    arguments: user_id,

    gets apecific user id and checks whether already logged in user have the right to send comment on the  given user id

profile/delete-user-comment=>
App\Http\Controllers\Accounting\comment_controller@delete_comment

    arguments: c_id,

    gets a comment id and soft delete it if the comment is belong to already logged in user

////////////////////////////////////////////////////////////////////////////////////////////

get_seller_phone_number=>
App\Http\Controllers\Accounting\phone_number_controller@get_seller_phone_number

    arguments: p_id, s_id, item,

    gets a product id and a seller id and checks whether the logged in user have the right to see
    the seller phone number and if true it will send the phone number

get_buyer_phone_number=>
App\Http\Controllers\Accounting\phone_number_controller@get_buyer_phone_number

    arguments: ba_id, b_id, item,

    gets a buy advertisement id and a buyer id and checks whether already logged in user have the right 
    to see phone number of the person who registred the advertisement if the b_id is the owner of ba_id

set_phone_number_view_permission=>
App\Http\Controllers\Accounting\phone_number_controller@set_my_phone_number_view_permissions

    arguments: permission,

    gets a boolean permission on whether the logged in user wants others be able to see his/her
    phone number when they request it

get_phone_number_viewers_list=>
App\Http\Controllers\Accounting\phone_number_controller@get_my_phone_number_viewers_list

    artguments: 

    return last fifty persons who view the already logged in users phone number


////////////////////////////////////////////////////////////////////////////////////////////

shared-profile/{username}=>
App\Http\Controllers\Accounting\profile_controller@get_user_shared_profile_info

get_user_last_confirmed_profile_photo=>
App\Http\Controllers\Accounting\profile_controller@get_user_last_confirmed_profile_photo

user/profile_info=>
App\Http\Controllers\Accounting\profile_controller@get_last_profile_info_with_all_related_content

user/profile_modification=>
App\Http\Controllers\Accounting\profile_controller@profile_modification

get_user_statistics_by_user_name=>
App\Http\Controllers\Accounting\profile_controller@get_user_statistics_by_user_name

load_profile_by_user_name=>
App\Http\Controllers\Accounting\profile_controller@get_last_profile_info_with_all_related_content_by_user_name

////////////////////////////////////////////////////////////////////////////////////////////

get_user_reputation_score=>
App\Http\Controllers\Accounting\reputation_controller@calculate_user_reputation_score

    arguments: user_id

    calculate reputation score for the given user_id 

/////////////////////////////////////////////////////////////////////////////////////////////

dologin=>
App\Http\Controllers\Accounting\user_controller@login

    arguments: phone, password, client, plain,

    get phone number and password from a user and log in the user if information were true after that 
    insert user login information in database

    if the user redirect here from register part plain is false

    if the information are true but the user is blocked does not let him/her to do login

user/is_user_name_unique=>
App\Http\Controllers\Accounting\user_controller@does_user_name_already_exists

    arguments: user_name,

    gets a user name and cheks if it already have been taken by other users or not

user/is_national_code_unique=>
App\Http\Controllers\Accounting\user_controller@does_national_code_already_exists

    arguments: national_code,

    get a national code and checks if it already set to other people or not

change_password=>
App\Http\Controllers\Accounting\user_controller@change_password

    arguments: current_password, new_password,

    gets current password and new password from logged in user and check if they are valid and
    set new password in database after that

get_seller_dashboard_required_data=>
App\Http\Controllers\Accounting\user_controller@get_seller_dashboard_required_data

    arguments:

    return some data for ui to show logged in user dashboard information

switch-role=>
App\Http\Controllers\Accounting\user_controller@switch_user_role

    arguments: 

    get logged in user current role form session and change it to the oposite role buyer=>seller

    return error if the request has sent with get method 

get_show_pricing_page_status=>
App\Http\Controllers\Accounting\user_controller@get_pricing_page_visit_status

    arguments: 

    return show and show_off and pricing_view_count  base on some logged in user information and 

get_my_account_balance=>
App\Http\Controllers\Accounting\user_controller@get_my_account_balance

    arguments: 

    return logged in users account balance if user logged in and exist and its role is seller

reset_password=>
App\Http\Controllers\Accounting\user_controller@reset_password

    arguments: phone, verification_code,

    gets phone number of the user and the verification code who the user recived and generate 
    new password for user and sms it to already verified phone number and set it as user password
    in database

refresh-token=>
App\Http\Controllers\Accounting\user_controller@refresh_token

    arguments: 

    reset jwt auth token and return new one and if token have problems it will send 
    redirect to login as true for client

is_user_from_webview=>
App\Http\Controllers\Accounting\user_controller@is_user_from_webview

    arguments:

    checks if the request header have User-Agent equal to web-view and return its result as boolean

/////////////////////////////////////////////////////////////////////////////////////////////

verify/upload-photos=>
App\Http\Controllers\Accounting\verification_controller@upload_verification_photos

    arguments: some image files 

    verify recived image and store them in database

/////////////////////////////////////////////////////////////////////////////////////////////

get_buyAd_list=>
App\Http\Controllers\BuyAd\buyAd_controller@get_buyAd_list

    arguments: from, to,

    return buy advertisements with specific start and end index of founded ads

get_sample_buyAds=>
App\Http\Controllers\BuyAd\buyAd_controller@get_sample_buyAds

    arguments: 

    return buy ad from last two weeks until now

user/add_buyAd=>
App\Http\Controllers\BuyAd\buyAd_controller@add_buyAd

    arguments: values of this end point generates in run time (name, requirement_amount, category_id,)

    get new buy ad informations and set new ad in database if successfull find related products to
    the just inserted records and set some cokies base on products

    return related products or  failur object if failed

delete_buy_ad_by_id=>
App\Http\Controllers\BuyAd\buyAd_controller@delete_buy_ad_by_id

    arguments: buy_ad_id,

    gets a buy ad and soft delete it if exist and belongs to logged in user

get_related_buyAds_list_to_the_seller=>
App\Http\Controllers\BuyAd\buyAd_controller@get_related_buyAds_list_to_the_seller

    arguments: 

    fetch the buy ad for currently logged in seller and return them after some filtring

get_user_permission_for_buyAd_reply=>
App\Http\Controllers\BuyAd\buyAd_controller@check_user_permisson_for_sending_buyAd_reply

    arguments: buy_ad_id,

    checks if the logged in user have the right to send replay to the given buy_ad_id advertisement


get_my_buyAd_suggestions=>
App\Http\Controllers\BuyAd\buyAd_controller@get_my_buyAd_suggestions

    arguments: 

    find buy ad sugestions for logged in user and find the golden sugestions 
    and return the after some sort and filter

get_my_buyAds=>
App\Http\Controllers\BuyAd\buyAd_controller@get_my_buyAds

    arguments:

    return the buy ads which belongs to the logged in user 

//////////////////////////////////////////////////////////////////////////////////////

    have some duplicate code fragment

get_category_list=>
App\Http\Controllers\General\category_controller@get_all_categories

    arguments:

    get all categories from database and cache them

    restructure categories and return them to user

//////////////////////////////////////////////////////////////////////////////////////

    have some duplicate code fragment

location/get_location_info=>
App\Http\Controllers\General\location_controller@get_all_provinces_or_cities_in_the_province_in_iran

    arguments: province_id, cascade_list, 

    return all iran provinces with their location if no argument passed

    return all province cities if province id has passed 

    cascade do something here but i dont know what is it exactly

///////////////////////////////////////////////////////////////////////////////////////

get_special_users_info=>
App\Http\Controllers\General\marketing_data_controller@get_special_users_info

    arguments: 

    return users with pakage type three as special users

//////////////////////////////////////////////////////////////////////////////////////

download-media=>
App\Http\Controllers\General\media_controller@download_media

this route is registred but download_media does not exist in controller

//////////////////////////////////////////////////////////////////////////////////////

sitemap-buskool-txwhgvuikd.xml=>
App\Http\Controllers\General\sitemap_controller@get_required_data_for_sitemap

    arguments: 

    creates a site map xml for google 

//////////////////////////////////////////////////////////////////////////////////////

get_channel_contents=>
App\Http\Controllers\Messenger\channel_controller@get_channel_contents

    arguments: 

    return some contents from database for logged in user

public-channel/{slug}=>
App\Http\Controllers\Messenger\channel_controller@get_channel_content_by_id

    arguments: slug,

    return official buskool channel contents with given id

//////////////////////////////////////////////////////////////////////////////////////

    //////////////////// following routes are in this controller but do things for admins //////////

admin/add-channel-content=>
App\Http\Controllers\Messenger\channel_controller@add_content

admin/d-channel-content=>
App\Http\Controllers\Messenger\channel_controller@delete_channel_content

admin/channel-contents-list=>
App\Http\Controllers\Messenger\channel_controller@get_all_channel_contents

admin/submit-to-channel=>
App\Http\Controllers\Messenger\channel_controller@submit_contents_to_channel


//////////////////////////////////////////////////////////////////////////////////////

group/get_groups_list=>
App\Http\Controllers\Messenger\group_message_controller@get_user_groups_list

    arguments: 

    return the groups that the user has subscribed with related informations and unread message count

group/subscribe_user=>
App\Http\Controllers\Messenger\group_message_controller@subscribe_user_in_group

    arguments: group_id,

    gets a group id and checks if the group is active and subscribe logged in user in that 
    group if he/she has not been subscribed already

group/send_message=>
App\Http\Controllers\Messenger\group_message_controller@send_message

    arguments: text, group_id, replied_msg_id,

    gets a messege form logged in user and cheks if he/she can send message to the requested 
    group if so checks if the text does not have any problem in case of impolite words or spams
    then insert it into database and send notification to group get_my_phone_number_viewers_list

    if replied_msg_id was sent, sets the message who the user replayed to  

group/get_group_chats=>
App\Http\Controllers\Messenger\group_message_controller@get_group_chats

    arguments: group_id, message_count,

    return messages form given group id with given count from logged in user and mark them as read
    before returning

group/get_all_groups=>
App\Http\Controllers\Messenger\group_message_controller@get_all_groups

    arguments: 

    return all groups who the logged in user have joined

group/unsubscribe_user=>
App\Http\Controllers\Messenger\group_message_controller@unsubscribe_user_from_group

    arguments: group_id,

    hard delete user to channel subscription even though there is a feild in database named is_active

////////////////////////////////////////////////////////////////////////////////////////////

messanger/send_message=>
App\Http\Controllers\Messenger\message_controller@send_message

    arguments: sender_id, receiver_id, text,

    send a message from logged in user to the receiver_id with given text and store message in database
    if the reciver user is valid and not blocked

send_reply_to_buyAd=>
App\Http\Controllers\Messenger\message_controller@send_reply_message_to_the_buyAd

    arguments: buy_ad_id, text,

    cheks if the logged in user allowed to replay to given buy ad and create new request to
    send message end point and return them if user was allowed

send_reply_to_product=>
App\Http\Controllers\Messenger\message_controller@send_reply_message_to_the_product

    arguments: product_id, text,

    checks if product is still exist and set some records for user_products for the product 
    who the user sent msg on if no product view recodrd was not found and send message by
    creating request to send message end point



get_contact_list=>
App\Http\Controllers\Messenger\message_controller@get_current_user_contact_list

    arguments: from, to,

    return contact list form given index to given index with chat information unread messages
    and channel informations the verification status of the logged in user if the logged in user 
    does not block and exist and if blocked will do the logout get_all_provinces_or_cities_in_the_province_in_iran

get_total_unread_messages_for_current_user=>
App\Http\Controllers\Messenger\message_controller@get_total_unread_messages_for_current_user

    arguments:

    return count of total unread messages who the logged in user did not see them until now

get_user_chat_history=>
App\Http\Controllers\Messenger\message_controller@get_user_chat_history

    arguments: user_id, form, to,

    return the a chat history between logged in user and given user_id limited by from
    as start of message index and to as end of message index

set_last_chat_contact=>
App\Http\Controllers\Messenger\message_controller@set_last_chat_contact

    arguments: contact_id, first_name, last_name, user_name,

    set a session as last chat contact for logged in user with all given information and
    count of unread message and profile photo 

get_last_chat_contact_info_from_session=>
App\Http\Controllers\Messenger\message_controller@get_last_chat_contact_info_from_session

    arguments: 

    get the information that stored in session from above method and return them 

///////////////////////////////////////////////////////////////////////////////////////////

get_report_options=>
App\Http\Controllers\Messenger\report_controller@get_report_options

    arguments: 

    return options form database who the user can set a report action with their id for other users

send_user_report=>
App\Http\Controllers\Messenger\report_controller@send_user_report

    arguments: reported_id, option_id, description,

    sets a report form logged in user to given reported_id user 

    if the report needs desciption it will be added to validation rules

///////////////////////////////////////////////////////////////////////////////////////////

fcm/register_token=>
App\Http\Controllers\Notification\fcm_controller@subscribe_token_in_topic

    arguments: token, topic,

    subscribe a token in firebase google api and return it to user

fcm/register_token_in_groups=>
App\Http\Controllers\Notification\fcm_controller@subscribe_token_in_groups

    arguments: token,

    set a recived token in a related queue for settin in firebase

fcm/unregister_token=>
App\Http\Controllers\Notification\fcm_controller@unsubscribe_token_from_groups

    arguments: token,

    gets a firebase token and unregister it

//////////////////////////////////////////////////////////////////////////////////////////

send_phone_verification_code_for_password_reset=>
App\Http\Controllers\Notification\sms_controller@send_phone_verification_code_for_password_reset

    arguments: phone,

    recives a new phone number and send a verification code to it as sms
    if some user already register with given phone number

send_verification_code=>
App\Http\Controllers\Notification\sms_controller@send_phone_verification_code

    arguments: phone,

    send a generated validation code as sms to the given phone number and store
    verification code in session 

verify_code=>
App\Http\Controllers\Notification\sms_controller@verify_code

    arguments: verification_code, phone, client,

    verify verification code sended in previous step and checks if the code is confirmed
    then create a login request and redirect user to login page 

///////////////////////////////////////////////////////////////////////////////////////////

app/get_product_list=>
App\Http\Controllers\Product\product_list_controller@get_product_list

///////////////////////////////////////////////////////////////////////////////////////////

product-view/{category_name}/{extra_text}/{product_id}=>
App\Http\Controllers\Product\product_controller@get_product_blade

    arguments: $extra_text, $category_name, $product_id,

    checks if request is from a bot or not next checks if the given product id is not correct
    find a category and redirec user to that category page unless gains some statistics about 
    user and return a view with that information


get_category_meta_data=>
App\Http\Controllers\Product\product_controller@get_category_tags_data_if_any

    arguments: category_name,

    finds  tags related to given category id and return them if exist 

get_product_by_id=>
App\Http\Controllers\Product\product_controller@get_product_by_id

    arguments: product_id,

    return a product with all related data in database 

    set a record as user product seen in database

    increment product view 

get_related_products=>
App\Http\Controllers\Product\product_controller@get_related_products_to_given_the_product

    arguments: product_id,

    gets a product id and return related products from their subcategory and with checking 
    products by products 

get_product_list_by_user_name=>
App\Http\Controllers\Product\product_controller@get_product_list_by_user_name

    arguments: user_name, from_record_number, to_record_number, 

    gets a user name and find all of the ueser products and return them base on indexes
    from_record_number and to_record_number 

get_sample_products=>
App\Http\Controllers\Product\product_controller@get_sample_products

    arguments: 

    return products form ten days ago until now 

user/add_product=>
App\Http\Controllers\Product\product_controller@add_product

    arguments:stock, min_sale_price, max_sale_price, min_sale_amount, product_name, category_id, city_id, images_count, (image files)

    gets product basic information and create new product advertisement in database for the logged in
    user if the user have permission to register an other product and return most related buy ads if any
    exist if not the inserted product information will return

delete_product_by_id=>
App\Http\Controllers\Product\product_controller@delete_product_by_id

    arguments: product_id, 

    gets a poduct id and if the product owns by logged in user soft deletes it
    unless response will be permission denied

edit_product=>
App\Http\Controllers\Product\product_controller@edit_product_by_id

    arguments: product_id, min_sale_price, max_sale_price, min_sale_amount, stock

    checks if the product is owned by logged in user if so edit product id with given values

is_user_allowed_to_register_product=>
App\Http\Controllers\Product\product_controller@is_user_allowed_to_register_product

    arguments:

    checks if the logged in user have the right to register an other product or not

get_related_buyAds_to_my_product=>
App\Http\Controllers\Product\product_controller@get_related_buyAds_to_the_last_registered_product

    arguments: 

    return most related buy ads to the buy ads owned by logged in user if registered before

//////////////////////////////////////////////////////////////////////////////////

payment/get-packages-price=>
App\Http\Controllers\Payment\payment_controller@get_packages_price

    arguments: 

    reads the buskool pakage prices and return them 

app-payment/elevator/{product_id}=>
App\Http\Controllers\Payment\payment_controller@app_do_elevator_payment

app-payment/product-capacity/{user_id}/{extra_capacity}=>
App\Http\Controllers\Payment\payment_controller@app_do_product_capacity_payment

app-payment/buyAd-reply-capacity/{user_id}/{extra_capacity}=>
App\Http\Controllers\Payment\payment_controller@app_do_buyAd_reply_capacity_payment

app-payment/payment/{user_id}/{pakageType}=>
App\Http\Controllers\Payment\payment_controller@app_do_payment

//////////////////////////////////////////////////////////////////////////////////

user/get_product_list=>
App\Http\Controllers\Product\product_list_controller@get_product_list

    arguments:
        from_record_number
        to_record_number
        category_id
        province_id
        city_id
        search_text
        special_products
        sort_by

    sortings types: 
        'RR' =>  response rate
        'RT' => response time
        'RD' =>  product owner registration date
        'BM' => sort products by best match

    return product list with given filters and sortings 


//////////////////////////////////////////////////////////////////////////////////

wallet-expend/buyAd-capacity=>
App\Http\Controllers\Payment\wallet_controller@do_extra_buyAd_capacity_payment_from_wallet

    empty function

wallet-expend/elevator=>
App\Http\Controllers\Payment\wallet_controller@do_elevator_payment_from_wallet

    arguments: product_id,

    elevate the given product id for already logged in user if user balance is enough

wallet-expend/product-capacity=>
App\Http\Controllers\Payment\wallet_controller@do_extra_product_capacity_payment_from_wallet

    empty function


logout


api/v1/users

//////////////////////////////////// routes from client who does not exist in laravel ///////////////////

dashboard/buyAd-request-detail
dashboard/sell-offer-detail


get-user-phone-contacts
get-user-referral-info
refresh_my_product_by_id
wallet-expend/elevatorapi/v1/users


//////////////////////////////////////// commented routes 
accept_sell_offer_by_id
add_sell_offer
confirm_initial_contract
get_my_buyAds_with_related_sell_offers
get_my_sell_offer_list
reject_sell_offer_by_id


///////////////////// route exist

wallet-expend/buy-package // is a new route and does not exist in this version









