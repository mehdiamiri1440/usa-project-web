version: '3.5'

services:
  traefik:
    image: traefik:v2.0
    restart: always
    container_name: traefik
    ports:
        - "80:80" # <== http
        - "8080:8080" # <== :8080 is where the dashboard runs on
        # - "443:443" # <== https
    command:
    #### These are the CLI commands that will configure Traefik and tell it how to work! ####
        ## API Settings - https://docs.traefik.io/operations/api/, endpoints - https://docs.traefik.io/operations/api/#endpoints ##
        - --api.insecure=true # <== Enabling insecure api, NOT RECOMMENDED FOR PRODUCTION
        - --api.dashboard=true # <== Enabling the dashboard to view services, middlewares, routers, etc...
        - --api.debug=true # <== Enabling additional endpoints for debugging and profiling
          ## Log Settings (options: ERROR, DEBUG, PANIC, FATAL, WARN, INFO) - https://docs.traefik.io/observability/logs/ ##
        - --log.level=DEBUG # <== Setting the level of the logs from traefik
          ## Provider Settings - https://docs.traefik.io/providers/docker/#provider-configuration ##
        - --providers.docker=true # <== Enabling docker as the provider for traefik
        - --providers.docker.exposedbydefault=false # <== Don't expose every container to traefik, only expose enabled ones
       # - --providers.file.filename=/dynamic.yaml # <== Referring to a dynamic configuration file
        - --providers.docker.network=web # <== Operate on the docker network named web
          ## Entrypoints Settings - https://docs.traefik.io/routing/entrypoints/#configuration ##
        - --entrypoints.web.address=:80 # <== Defining an entrypoint for port :80 named web
        #- --entrypoints.web-secured.address=:443 # <== Defining an entrypoint for https on port :443 named web-secured
          ## Certificate Settings (Let's Encrypt) -  https://docs.traefik.io/https/acme/#configuration-examples ##
        #- --certificatesresolvers.mytlschallenge.acme.tlschallenge=true # <== Enable TLS-ALPN-01 to generate and renew ACME certs
        #- --certificatesresolvers.mytlschallenge.acme.email=theafkdeveloper@gmail.com # <== Setting email for certs
        #- --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json # <== Defining acme file to store cert information
    volumes:
        #- ./letsencrypt:/letsencrypt # <== Volume for certs (TLS)
        - /var/run/docker.sock:/var/run/docker.sock # <== Volume for docker admin
        #- ./dynamic.yaml:/dynamic.yaml # <== Volume for dynamic conf file, **ref: line 27
    networks:
        - web # <== Placing traefik on the network named web, to access containers on this network
    labels:
        #### Labels define the behavior and rules of the traefik proxy for this container ####
        - "traefik.enable=true" # <== Enable traefik on itself to view dashboard and assign subdomain to view it
        - "traefik.http.routers.api.rule=Host(`monitor.localhost`)" # <== Setting the domain for the dashboard
        - "traefik.http.routers.api.service=api@internal" # <== Enabling the api to be a service to access    
  laravel-app:
    image: buskool-app
    build:
      context: '.'
    container_name: bsukool-app
    environment:
        CONTAINER_ROLE: app
    volumes:
      - .:/var/www/html
    ports:
      - 5050:4576
    #   - 4403:443
    labels:
        #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.nginx.rule=Host(`app.localhost`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.nginx.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      #- "traefik.http.routers.nginx-web.middlewares=redirect@file" # <== This is a middleware to redirect to https
      #- "traefik.http.routers.nginx-secured.rule=Host(`example.com`)" # <== Your Domain Name for the https rule 
      #- "traefik.http.routers.nginx-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      #- "traefik.http.routers.nginx-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
    networks:
      - web
      - backend
  mysql-db:
    image: mysql:5.6
    container_name: mysql-db
    volumes:
      - dbdata:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=abc123
      - MYSQL_DATABASE=dataAnalysis
      - MYSQL_USER=dbuser
      - MYSQL_PASSWORD=abc123
    networks:
      backend:
        aliases:
          - db

  my-phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.0.2
    container_name: phpmyadmin
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOST=mysql-db
      - MYSQL_ROOT_PASSWORD=abc123
      - PMA_POST=3306
    depends_on:
      - mysql-db
    ports:
      - 6060:3035
    labels:
        #### Labels define the behavior and rules of the traefik proxy for this container ####
      - "traefik.enable=true" # <== Enable traefik to proxy this container
      - "traefik.http.routers.nginx-web.rule=Host(`blog.localhost`)" # <== Your Domain Name goes here for the http rule
      - "traefik.http.routers.nginx-web.entrypoints=web" # <== Defining the entrypoint for http, **ref: line 30
      #- "traefik.http.routers.nginx-web.middlewares=redirect@file" # <== This is a middleware to redirect to https
      #- "traefik.http.routers.nginx-secured.rule=Host(`example.com`)" # <== Your Domain Name for the https rule 
      #- "traefik.http.routers.nginx-secured.entrypoints=web-secured" # <== Defining entrypoint for https, **ref: line 31
      #- "traefik.http.routers.nginx-secured.tls.certresolver=mytlschallenge" # <== Defining certsresolvers for https
    networks:
      - web
      - backend
    
  scheduler:
    image: buskool-app
    container_name: laravel-scheduler
    volumes:
       - .:/var/www/html
    depends_on:
      - laravel-app
    environment:
      CONTAINER_ROLE: scheduler
    networks:
      -  backend

  queue:
    image: buskool-app
    container_name: laravel-queue
    depends_on:
      - laravel-app
    volumes:
      - .:/var/www/html
    environment:
      CONTAINER_ROLE: queue
    networks:
      - backend
        
 
networks:
  backend:
    name: backend-network
    external: false
  web:
    external: true

volumes:
    dbdata:
       driver: local
